#!/bin/bash

# ------------------------------- CONFIG BEGIN --------------------------------

# This needs to be set explicitly, because $HOME is not set when the service is started by Batocera.
export RCLONE_CONFIG=/userdata/system/.config/rclone/rclone.conf

# The location of Batocera data on your cloud storage.
destDir=/Batocera

# Waiting time between two backups in seconds.
# The below configuration means that the service will do a backup every minute.
waitSeconds=60

# If set to true, logs from all runs of the service are preserved.
# If set to false, only logs since the last start of the service are kept.
keepLogs=false

# The name of the created backup-service, per default it is backup, but you should
# enter here the rclone configuration remote you want to use, leave blank or
remoteName=$(awk -F '[][]' 'NR==1{print $2}' ${RCLONE_CONFIG})
# remoteName=backup

# Which way you want to use for automated setup sync: host -/> cloud
# if you want to mirror files then better use bisync: host <-> cloud
# if you want to copy files 2 host then use cmd copy: host --> cloud
# So syncMethod can be sync, bisync, copy
syncMethod=bisync

# -------------------------------- CONFIG END ---------------------------------

runFile=/var/run/backup-service
logFile=/var/log/backup-service.log

manual() {

    [[ "$1" == "backup" || "$1" == "restore" ]] || { echo "Usage: $0 manual <backup/restore>"; return 1; }

    local i
    echo "Attention: This will overwrite your local or remote data!"
    read -p "Do you want to $1 your data? (y/n): " i

    case "$i" in
        y|Y) true ;;
        *)   echo "Aborted!"; return 1
    esac

    local DESCRIPTION=("CONFIG" "SAVES" "ROMS" "BIOS")

    local PATH_LOCAL=("/userdata/system/batocera.conf"
                       "/userdata/saves"
                       "/userdata/roms"
                       "/userdata/bios")

    local PATH_REMOTE=("${remoteName}:${destDir}/system"
                       "${remoteName}:${destDir}/saves"
                       "${remoteName}:${destDir}/roms"
                       "${remoteName}:${destDir}/bios")

    case "$1" in
        backup)
            for i in ${!DESCRIPTION[@]}; do
                printf "%-25s %s %20s %s\n" "> sync local:${DESCRIPTION[$i]}" "->" "remote:${remoteName}" "------------------------------------------------------------------------------------"
                rclone sync "${PATH_LOCAL[$i]}" "${PATH_REMOTE[$i]}" --exclude "flatpak/**" --progress
            done
        ;;
        restore)
            for i in ${!DESCRIPTION[@]}; do
                printf "%-25s %s %20s %s\n" "> sync remote:${remoteName}" "->" "local:${DESCRIPTION[$i]}" "------------------------------------------------------------------------------------"
                rclone sync "${PATH_REMOTE[$i]}" "${PATH_LOCAL[$i]}" --exclude "flatpak/**" --progress
            done
        ;;
    esac

}

start() {
    touch ${runFile}

    if [ "$keepLogs" = false ]; then
        rm -f ${logFile}
    fi

    timeStamp="$(date)"
    echo -e "\n--- SERVICE START - Method: ${syncMethod} - [${timeStamp}] ---\n" >>${logFile}


    case "${syncMethod}" in
    sync)
        while test -e ${runFile}; do
            sleep ${waitSeconds}
            rclone sync /userdata/saves ${remoteName}:${destDir}/saves --exclude "flatpak/**" --log-file ${logFile} --log-level INFO
        done
    ;;
    bisync)
        rclone bisync /userdata/saves ${remoteName}:${destDir}/saves --exclude "flatpak/**" --dry-run
        ret=$?
        if [[ $ret -ne 0 ]]; then
            rclone bisync /userdata/saves ${remoteName}:${destDir}/saves --exclude "flatpak/**" --compare size,modtime,checksum --log-file ${logFile} --log-level INFO --resync
        fi
        rclone bisync /userdata/saves ${remoteName}:${destDir}/saves --exclude "flatpak/**" --compare size,modtime,checksum --log-file ${logFile} --log-level INFO
    ;;
    copy)
        while test -e ${runFile}; do
            sleep ${waitSeconds}
            rclone copy /userdata/saves ${remoteName}:${destDir}/saves --exclude "flatpak/**" --log-file ${logFile} --log-level INFO
        done               
    ;;
    esac
}

stop() {
    timeStamp="$(date)"
    echo -e "\n--- SERVICE STOP - Method: ${syncMethod} - [${timeStamp}] --- \n" >>${logFile}

    rm -f ${runFile}
    #bisync only on stop condition, because it is longer
    case "${syncMethod}" in
    bisync)
        rclone bisync /userdata/saves ${remoteName}:${destDir}/saves --exclude "flatpak/**" --compare size,modtime,checksum --log-file ${logFile} --log-level INFO
    ;;
    esac
}

status() {
    if test -e ${runFile}; then
        echo "Backup service is running. Logs: ${logFile}"
    else
        echo "Backup service is not running."
    fi
}

case "${1,,}" in
    manual)
        manual "${2,,}"
        ;;
    start)
        start &
        ;;
    stop)
        stop
        ;;
    status)
        status
        ;;
    *)
        echo "Usage ${0} <start/stop/status>"
        echo "Usage ${0} manual <backup/restore>"
        echo
        echo "Initial idea: https://gitlab.com/peterbozso/batocera-backup-service"
esac
